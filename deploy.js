//genache is used as a VM to test smart contract https://trufflesuite.com/ganache/ download and install
// use ethers or web3.js to interat with blockchains

const ethers = require("ethers"); // needed to interact with blockchains
const fs = require("fs-extra"); //we need to work with files

async function main() {
  // http://127.0.0.1:7545
  // explore playground.open-rpc.org to learn more about api calls
  // we will compile sol separatelly using solcJs
  // yarn solcjs --bin --include-path node_modules/ --base-path . SimpleStorage.sol

  const provider = new ethers.providers.JsonRpcProvider(
    "http://127.0.0.1:7545"
  );

  const wallet = new ethers.Wallet(
    "30360b24d44ec9116f6e1c7108fdf190a614efbaab71257ef0786e83dc85bac1", // Do not keep private key directly in the code !!!
    provider
  );

  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");

  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );

  // UNCOMMENT 4 Lines of code below for deploying with method 1 and comment manual deployment with tx below
  //const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

  //console.log("Deploying .. please wait...");

  //const contract = await contractFactory.deploy(); // STOP HERE TO DEPLOY
  // we can use await becouse deploy() returns a promise

  //const deploymentReceipt = await contract.deployTransaction.wait(1); // wait for confirmation on how many blocks to be added to ensure that contract was added

  //console.log("Here is the deployment transaction:");
  //console.log(contract.deployTransaction);

  //console.log("Here is the transaction receipt:");
  //console.log(deploymentReceipt);
  // ===============================================================

  // learning how to create txn manually:
  console.log("Lets deploy with only txn data");
  const nonce = await wallet.getTransactionCount();
  const tx = {
    nonce: nonce,
    gasPrice: 20000000000,
    gasLimit: 1000000,
    to: null,
    value: 0,
    data: "0x60806040526040518060400160405280600181526020016040518060400160405280600681526020017f50617472696b0000000000000000000000000000000000000000000000000000815250815250600160008201518160000155602082015181600101908051906020019061007792919061008c565b50505034801561008657600080fd5b50610190565b8280546100989061012f565b90600052602060002090601f0160209004810192826100ba5760008555610101565b82601f106100d357805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101005782518255916020019190600101906100e5565b5b50905061010e9190610112565b5090565b5b8082111561012b576000816000905550600101610113565b5090565b6000600282049050600182168061014757607f821691505b6020821081141561015b5761015a610161565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61087d8061019f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806377ec2b551161005b57806377ec2b55146100d85780638bab8dd5146100f7578063a2f9eac614610127578063d4d30f2c146101585761007d565b80632e64cec1146100825780636057361d146100a05780636f760f41146100bc575b600080fd5b61008a610176565b6040516100979190610636565b60405180910390f35b6100ba60048036038101906100b59190610579565b61017f565b005b6100d660048036038101906100d1919061051d565b610189565b005b6100e061021f565b6040516100ee929190610651565b60405180910390f35b610111600480360381019061010c91906104d4565b6102b9565b60405161011e9190610636565b60405180910390f35b610141600480360381019061013c9190610579565b6102e7565b60405161014f929190610651565b60405180910390f35b6101606103a3565b60405161016d9190610636565b60405180910390f35b60008054905090565b8060008190555050565b6000604051806040016040528083815260200184815250905060048190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101f49291906103ac565b50505081600384604051610208919061061f565b908152602001604051809103902081905550505050565b60018060000154908060010180546102369061074a565b80601f01602080910402602001604051908101604052809291908181526020018280546102629061074a565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905082565b6003818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600481815481106102f757600080fd5b90600052602060002090600202016000915090508060000154908060010180546103209061074a565b80601f016020809104026020016040519081016040528092919081815260200182805461034c9061074a565b80156103995780601f1061036e57610100808354040283529160200191610399565b820191906000526020600020905b81548152906001019060200180831161037c57829003601f168201915b5050505050905082565b60006002905090565b8280546103b89061074a565b90600052602060002090601f0160209004810192826103da5760008555610421565b82601f106103f357805160ff1916838001178555610421565b82800160010185558215610421579182015b82811115610420578251825591602001919060010190610405565b5b50905061042e9190610432565b5090565b5b8082111561044b576000816000905550600101610433565b5090565b600061046261045d846106a6565b610681565b90508281526020810184848401111561047e5761047d610810565b5b610489848285610708565b509392505050565b600082601f8301126104a6576104a561080b565b5b81356104b684826020860161044f565b91505092915050565b6000813590506104ce81610830565b92915050565b6000602082840312156104ea576104e961081a565b5b600082013567ffffffffffffffff81111561050857610507610815565b5b61051484828501610491565b91505092915050565b600080604083850312156105345761053361081a565b5b600083013567ffffffffffffffff81111561055257610551610815565b5b61055e85828601610491565b925050602061056f858286016104bf565b9150509250929050565b60006020828403121561058f5761058e61081a565b5b600061059d848285016104bf565b91505092915050565b60006105b1826106d7565b6105bb81856106e2565b93506105cb818560208601610717565b6105d48161081f565b840191505092915050565b60006105ea826106d7565b6105f481856106f3565b9350610604818560208601610717565b80840191505092915050565b610619816106fe565b82525050565b600061062b82846105df565b915081905092915050565b600060208201905061064b6000830184610610565b92915050565b60006040820190506106666000830185610610565b818103602083015261067881846105a6565b90509392505050565b600061068b61069c565b9050610697828261077c565b919050565b6000604051905090565b600067ffffffffffffffff8211156106c1576106c06107dc565b5b6106ca8261081f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561073557808201518184015260208101905061071a565b83811115610744576000848401525b50505050565b6000600282049050600182168061076257607f821691505b60208210811415610776576107756107ad565b5b50919050565b6107858261081f565b810181811067ffffffffffffffff821117156107a4576107a36107dc565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610839816106fe565b811461084457600080fd5b5056fea2646970667358221220e89626de37d0cf7144f932f2ac98b535e9f9bb89e6ed35c0bb6ecc7fc85d970464736f6c63430008070033",
    chainId: 1337,
  };

  console.log("Signing txn:");
  const signedTxReponse = await wallet.signTransaction(tx);
  console.log(signedTxReponse); // transaction is just signed but not sent!

  console.log("Sending txn:");
  const sentTxResponse = await wallet.sendTransaction(tx);
  await sentTxResponse.wait(1);
  console.log(sentTxResponse);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
